{
  "id": 1,
  "title": "مقدمه‌ای بر ساختمان داده‌ها",
  "pages": [
    {
      "page": 1,
      "content": "<div class='text-block'><b>ساختمان داده چیست؟</b><br><br>در برنامه‌نویسی، یکی از پایه‌ای‌ترین مفاهیمی که تقریباً در تمام پروژه‌ها و نرم‌افزارها نقش اساسی دارد، «ساختمان داده» است. به زبان ساده، ساختمان داده روشی برای سازمان‌دهی و ذخیره‌سازی داده‌ها در حافظه است؛ به‌گونه‌ای که بتوان به آن‌ها به‌صورت مؤثر دسترسی داشت و آن‌ها را مدیریت کرد.</div>"
    },
    {
      "page": 2,
      "content": "<div class='text-block'><b>چرا به ساختمان داده‌ها نیاز داریم؟</b><br><br>استفاده از متغیرهای ساده مانند <i>int</i> یا <i>String</i> برای نگهداری اطلاعات در پروژه‌های کوچک کافی است. اما در برنامه‌های واقعی، داده‌ها معمولاً بزرگ و پیچیده‌اند؛ مانند لیست کاربران، ثبت سفارش‌ها، نقشه مسیرها و غیره. در چنین مواردی، استفاده از ساختمان داده‌ها ضروری می‌شود تا بتوانیم داده‌ها را بهینه مدیریت کنیم.</div>"
    },
    {
      "page": 3,
      "content": "<div class='text-block'><b>مزایای استفاده از ساختمان داده</b><br><br>ساختمان داده‌ها به ما اجازه می‌دهند تا عملیات‌هایی مانند جستجو، درج، حذف و به‌روزرسانی را با سرعت و کارایی بالا انجام دهیم. انتخاب درست یک ساختمان داده می‌تواند سرعت اجرای برنامه و مصرف حافظه را به‌شدت بهبود ببخشد.</div>"
    },
    {
      "page": 4,
      "content": "<div class='text-block'><b>تقسیم‌بندی کلی ساختمان داده‌ها</b><br><br>ساختمان داده‌ها به‌صورت کلی به دو دسته تقسیم می‌شوند:<br><br><b>۱. ساختمان داده‌های خطی (Linear):</b><br>در این نوع، داده‌ها به‌صورت متوالی ذخیره می‌شوند. مثال‌ها: <i>آرایه‌ها، لیست‌های پیوندی، پشته‌ها و صف‌ها</i>.<br><br><b>۲. ساختمان داده‌های غیرخطی (Non-Linear):</b><br>در این نوع، هر عنصر می‌تواند به چند عنصر دیگر مرتبط باشد. مثال‌ها: <i>درخت‌ها و گراف‌ها</i>.</div>"
    },
    {
      "page": 5,
      "content": "<div class='text-block'><b>نمونه‌ای از کاربرد واقعی</b><br><br>فرض کنید می‌خواهید نمرات دانش‌آموزان را ذخیره کرده و میانگین بگیرید. اگر برای هر نمره یک متغیر جداگانه استفاده کنید، کد بسیار طولانی و ناکارآمد می‌شود. اما با استفاده از آرایه یا لیست، می‌توانید همه نمرات را با هم ذخیره کرده و در یک حلقه میانگین را محاسبه کنید.</div>"
    },
    {
      "page": 6,
      "content": "<div class='text-block'><h2>پیچیدگی الگوریتم چیست؟</h2><p>وقتی یک الگوریتم می‌نویسیم، ممکن است چند راه مختلف برای حل یک مسئله وجود داشته باشد. اما کدام روش بهتر است؟ برای مقایسهٔ الگوریتم‌ها، از مفهومی به‌نام <b>پیچیدگی الگوریتم</b> استفاده می‌کنیم.</p><p>پیچیدگی الگوریتم به ما نشان می‌دهد که الگوریتم ما با بزرگ‌تر شدن اندازهٔ ورودی (مثل تعداد عناصر آرایه) <b>چقدر زمان</b> یا <b>چقدر حافظه</b> مصرف می‌کند.</p><p>به زبان ساده‌تر، پیچیدگی یعنی:</p><ul><li>الگوریتم شما چقدر سریع است؟</li><li>آیا با زیاد شدن داده‌ها، هنوز هم عملکرد قابل قبولی دارد؟</li></ul><p>مثلاً اگر الگوریتمی برای مرتب‌سازی ۱۰ عدد یک ثانیه طول بکشد، اما برای ۱۰۰۰۰۰ عدد چند دقیقه زمان ببرد، ممکن است برای داده‌های بزرگ مناسب نباشد.</p><p>برای بیان پیچیدگی، معمولاً از نمادهایی مانند <b>O(n)</b> استفاده می‌کنیم که در صفحات بعدی به آن‌ها خواهیم پرداخت.</p></div>"
    },
    {
      "page": 7,
      "content": "<div class='text-block'><h2>نمادهای رایج پیچیدگی الگوریتم</h2><p>برای بیان عملکرد الگوریتم‌ها از نمادهای ریاضی خاصی استفاده می‌کنیم که معروف‌ترین آن‌ها <b>نماد O بزرگ (Big O)</b> است. این نمادها به ما کمک می‌کنند تا رشد زمان یا حافظهٔ موردنیاز الگوریتم را نسبت به اندازهٔ ورودی تحلیل کنیم.</p><ul><li><b>O(n)</b>: رایج‌ترین نماد است و نشان می‌دهد که در بدترین حالت، زمان اجرا متناسب با <b>اندازه ورودی</b> رشد می‌کند. مثلاً اگر ورودی دو برابر شود، زمان هم تقریباً دو برابر می‌شود.</li><li><b>Ω(n)</b>: این نماد برای <b>بهترین حالت</b> اجرا به‌کار می‌رود. مثلاً وقتی که ورودی طوری است که الگوریتم خیلی سریع تمام می‌شود.</li><li><b>Θ(n)</b>: این نماد زمانی به‌کار می‌رود که الگوریتم در <b>بهترین و بدترین حالت</b>، رفتاری مشابه داشته باشد. یعنی زمان اجرا دقیقاً متناسب با اندازه ورودی باشد.</li></ul><p>در عمل بیشتر از <b>O</b> استفاده می‌کنیم، چون معمولاً می‌خواهیم عملکرد الگوریتم را در <b>بدترین شرایط ممکن</b> بررسی کنیم.</p></div>"
    },
    {
      "page": 8,
      "content": "<div class='text-block'><b>در این دوره چه خواهید آموخت؟</b><br><br>در این دوره، با انواع ساختمان داده‌ها آشنا می‌شوید، کاربرد آن‌ها را در مسائل واقعی یاد می‌گیرید و روش پیاده‌سازی‌شان در زبان Python را تمرین می‌کنید. هر درس شامل توضیح مفهومی، مثال‌های کاربردی و تمرین‌های تستی و برنامه‌نویسی خواهد بود.</div>"
    },
    {
      "page": 9,
      "content": "<div class='text-block'><b>هدف نهایی</b><br><br>هدف این دوره، تنها آمادگی برای امتحان یا مصاحبه نیست. بلکه هدف این است که در پروژه‌های واقعی، بتوانید ساختار داده مناسب را انتخاب کرده و برنامه‌ای کارآمد و قابل نگهداری بنویسید.</div>"
    }
  ]
}
