{
  "id": 8,
  "title": "الگوریتم‌های مرتب‌سازی",
  "pages": [
    {
      "page": 1,
      "content": "<div class='text-block'><h2>مرتب‌سازی چیست؟</h2><p>مرتب‌سازی فرآیند مرتب‌سازی داده‌ها در یک ترتیب مشخص است، معمولاً به ترتیب صعودی یا نزولی. مرتب‌سازی نقش مهمی در علوم کامپیوتر دارد زیرا باعث بهبود عملکرد جستجو، سازمان‌دهی بهتر داده‌ها و تحلیل آسان‌تر آن‌ها می‌شود.</p><p>الگوریتم‌های مختلفی برای مرتب‌سازی وجود دارد که هرکدام ویژگی‌ها، پیچیدگی زمانی و کاربردهای خاص خود را دارند. در این درس، چند الگوریتم معروف مرتب‌سازی را همراه با مثال‌های پایتون بررسی می‌کنیم.</p></div>"
    },
    {
      "page": 2,
      "content": "<div class='text-block'><h2>۱. مرتب‌سازی حبابی (Bubble Sort)</h2><p>در این روش، لیست چندین بار پیمایش می‌شود و هر بار عناصر مجاور مقایسه و در صورت نیاز جابه‌جا می‌شوند تا عنصر بزرگ‌تر به انتهای لیست «حباب» بزند.</p></div><div class = 'code-block'><pre><code class='language-python'>def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> O(n^2)</p></div>"
    },
    {
      "page": 3,
      "content": "<div class='text-block'><h2>۲. مرتب‌سازی انتخابی (Selection Sort)</h2><p>در این روش، در هر مرحله کوچک‌ترین عنصر از بخش نامرتب انتخاب و با اولین عنصر آن بخش جابه‌جا می‌شود.</p></div><div class = 'code-block'><pre><code class='language-python'>def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nprint(selection_sort([64, 25, 12, 22, 11]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> O(n^2)</p></div>"
    },
    {
      "page": 4,
      "content": "<div class='text-block'><h2>۳. مرتب‌سازی درجی (Insertion Sort)</h2><p>در این روش، عناصر یکی‌یکی از لیست گرفته شده و در محل مناسب خود در بخش مرتب‌شده قرار می‌گیرند.</p></div><div class = 'code-block'><pre><code class='language-python'>def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\nprint(insertion_sort([12, 11, 13, 5, 6]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> O(n^2)</p></div>"
    },
    {
      "page": 5,
      "content": "<div class='text-block'><h2>۴. مرتب‌سازی ادغامی (Merge Sort)</h2><p>الگوریتم تقسیم‌و‌حل است. آرایه به دو نیم تقسیم می‌شود، هر نیمه مرتب می‌شود و سپس دوباره با هم ادغام می‌شوند.</p></div><div class = 'code-block'><pre><code class='language-python'>def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    return arr\n\nprint(merge_sort([38, 27, 43, 3, 9, 82, 10]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> O(n log n)</p></div>"
    },
    {
      "page": 6,
      "content": "<div class='text-block'><h2>۵. مرتب‌سازی سریع (Quick Sort)</h2><p>یکی دیگر از روش‌های تقسیم‌و‌حل است. یک عنصر به عنوان pivot انتخاب شده و آرایه به دو بخش تقسیم می‌شود: کوچکترها و بزرگترها.</p></div><div class = 'code-block'><pre><code class='language-python'>def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n\nprint(quick_sort([3, 6, 8, 10, 1, 2, 1]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> میانگین O(n log n)، بدترین حالت O(n^2)</p></div>"
    },
    {
      "page": 7,
      "content": "<div class='text-block'><h2>۶. مرتب‌سازی هرمی (Heap Sort)</h2><p>از ساختار داده هیپ استفاده می‌کند. ابتدا یک هیپ ساخته شده، سپس عنصر بزرگ‌تر به انتهای لیست منتقل می‌شود.</p></div><div class = 'code-block'><pre><code class='language-python'>def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\nprint(heap_sort([12, 11, 13, 5, 6, 7]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> O(n log n)</p></div>"
    },
    {
      "page": 8,
      "content": "<div class='text-block'><h2>۷. مرتب‌سازی مبنایی (Radix Sort)</h2><p>این روش اعداد را بر اساس هر رقم، از کم‌اهمیت‌ترین تا پر‌اهمیت‌ترین مرتب می‌کند. از شمارش‌مرتب (Counting Sort) به عنوان زیرروال استفاده می‌کند.</p></div><div class = 'code-block'><pre><code class='language-python'>def counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n\n    for i in arr:\n        index = (i // exp) % 10\n        count[index] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        index = (arr[i] // exp) % 10\n        output[count[index] - 1] = arr[i]\n        count[index] -= 1\n        i -= 1\n\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max1 = max(arr)\n    exp = 1\n    while max1 // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    return arr\n\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> O(nk)، که k تعداد ارقام بزرگترین عدد است</p></div>"
    },
    {
      "page": 9,
      "content": "<div class='text-block'><h2>۸. مرتب‌سازی درختی (Tree Sort)</h2><p>در این روش، یک درخت جستجوی دودویی (BST) ساخته شده و از پیمایش in-order برای استخراج عناصر مرتب‌شده استفاده می‌شود.</p></div><div class = 'code-block'><pre><code class='language-python'>class Node:\n    def __init__(self, key):\n        self.left = self.right = None\n        self.val = key\n\ndef insert(root, key):\n    if root is None:\n        return Node(key)\n    if key < root.val:\n        root.left = insert(root.left, key)\n    else:\n        root.right = insert(root.right, key)\n    return root\n\ndef inorder(root, res):\n    if root:\n        inorder(root.left, res)\n        res.append(root.val)\n        inorder(root.right, res)\n\ndef tree_sort(arr):\n    if not arr:\n        return []\n    root = None\n    for key in arr:\n        root = insert(root, key)\n    res = []\n    inorder(root, res)\n    return res\n\nprint(tree_sort([5, 3, 7, 2, 4, 6, 8]))</code></pre></div><div class = 'text-block'><p><b>پیچیدگی زمانی:</b> میانگین O(n log n)، بدترین حالت O(n^2) اگر درخت نامتوازن باشد</p></div>"
    },
    {
      "page": 10,
      "content": "<div class='text-block'><h2>مقایسه الگوریتم‌های مرتب‌سازی</h2><table border='1' cellpadding='5'><thead><tr><th>الگوریتم</th><th>بهترین حالت</th><th>میانگین</th><th>بدترین حالت</th><th>پایدار</th><th>درجا</th></tr></thead><tbody><tr><td>مرتب‌سازی حبابی</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td><td>بله</td><td>بله</td></tr><tr><td>مرتب‌سازی انتخابی</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>خیر</td><td>بله</td></tr><tr><td>مرتب‌سازی درجی</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td><td>بله</td><td>بله</td></tr><tr><td>مرتب‌سازی ادغامی</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n log n)</td><td>بله</td><td>خیر</td></tr><tr><td>مرتب‌سازی سریع</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n^2)</td><td>خیر</td><td>بله</td></tr><tr><td>مرتب‌سازی هرمی</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n log n)</td><td>خیر</td><td>بله</td></tr><tr><td>مرتب‌سازی مبنایی</td><td>O(nk)</td><td>O(nk)</td><td>O(nk)</td><td>بله</td><td>خیر</td></tr><tr><td>مرتب‌سازی درختی</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n^2)</td><td>بله</td><td>خیر</td></tr></tbody></table></div>"
    }
  ]
}
